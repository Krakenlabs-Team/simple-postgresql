apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresql.fullname" . }}
spec:
  serviceName: {{ include "postgresql.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgresql.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgresql.name" . }}
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.fullname" . }}-secret
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: {{ .Values.postgresql.pgdata | quote }}
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "{{ .Values.postgresql.user }}"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "{{ .Values.postgresql.user }}"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          resources: {{ toYaml .Values.resources | nindent 12 }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "postgresql.name" . }}
              topologyKey: "kubernetes.io/hostname"
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: {{ .Values.persistence.accessModes | toYaml | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}